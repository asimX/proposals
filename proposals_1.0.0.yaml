paths:
  /dummyPath:
    get:
      responses:
        '200':
          description: 200 OK
  '/prUsers/{id}/proposals':
    get:
      tags:
        - prUsers
      summary: Queries proposals of prUsers.
      operationId: prUsers.prototype.__get__proposals
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: prUsers id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/proposals'
      deprecated: false
    post:
      tags:
        - prUsers
      summary: Creates a new instance in proposals of this model.
      operationId: prUsers.prototype.__create__proposals
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/proposals'
        - name: id
          in: path
          description: prUsers id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/proposals'
      deprecated: false
    delete:
      tags:
        - prUsers
      summary: Deletes all proposals of this model.
      operationId: prUsers.prototype.__delete__proposals
      parameters:
        - name: id
          in: path
          description: prUsers id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/prUsers/{id}/proposals/count':
    get:
      tags:
        - prUsers
      summary: Counts proposals of prUsers.
      operationId: prUsers.prototype.__count__proposals
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: prUsers id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /prUsers:
    post:
      tags:
        - prUsers
      summary: Create a new instance of the model and persist it into the data source.
      operationId: prUsers.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/prUsers'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/prUsers'
      deprecated: false
    patch:
      tags:
        - prUsers
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: prUsers.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/prUsers'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/prUsers'
      deprecated: false
    put:
      tags:
        - prUsers
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: prUsers.replaceOrCreate__put_prUsers
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/prUsers'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/prUsers'
      deprecated: false
    get:
      tags:
        - prUsers
      summary: Find all instances of the model matched by filter from the data source.
      operationId: prUsers.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/prUsers'
      deprecated: false
  /prUsers/upsertWithWhere:
    post:
      tags:
        - prUsers
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: prUsers.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/prUsers'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/prUsers'
      deprecated: false
  '/prUsers/{id}/exists':
    get:
      tags:
        - prUsers
      summary: Check whether a model instance exists in the data source.
      operationId: 'prUsers.exists__get_prUsers_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/prUsers/{id}':
    get:
      tags:
        - prUsers
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: prUsers.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/prUsers'
      deprecated: false
    put:
      tags:
        - prUsers
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'prUsers.replaceById__put_prUsers_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/prUsers'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/prUsers'
      deprecated: false
    delete:
      tags:
        - prUsers
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: prUsers.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /prUsers/findOne:
    get:
      tags:
        - prUsers
      summary: Find first instance of the model matched by filter from the data source.
      operationId: prUsers.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/prUsers'
      deprecated: false
  /prUsers/update:
    post:
      tags:
        - prUsers
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: prUsers.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/prUsers'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /prUsers/count:
    get:
      tags:
        - prUsers
      summary: Count instances of the model matched by where from the data source.
      operationId: prUsers.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /proposals:
    post:
      tags:
        - proposals
      summary: Create a new instance of the model and persist it into the data source.
      operationId: proposals.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/proposals'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/proposals'
      deprecated: false
    patch:
      tags:
        - proposals
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: proposals.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/proposals'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/proposals'
      deprecated: false
    put:
      tags:
        - proposals
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: proposals.replaceOrCreate__put_proposals
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/proposals'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/proposals'
      deprecated: false
    get:
      tags:
        - proposals
      summary: Find all instances of the model matched by filter from the data source.
      operationId: proposals.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/proposals'
      deprecated: false
  /proposals/upsertWithWhere:
    post:
      tags:
        - proposals
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: proposals.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/proposals'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/proposals'
      deprecated: false
  '/proposals/{id}/exists':
    get:
      tags:
        - proposals
      summary: Check whether a model instance exists in the data source.
      operationId: 'proposals.exists__get_proposals_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/proposals/{id}':
    get:
      tags:
        - proposals
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: proposals.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/proposals'
      deprecated: false
    delete:
      tags:
        - proposals
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: proposals.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /proposals/findOne:
    get:
      tags:
        - proposals
      summary: Find first instance of the model matched by filter from the data source.
      operationId: proposals.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/proposals'
      deprecated: false
  /proposals/update:
    post:
      tags:
        - proposals
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: proposals.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/proposals'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /proposals/count:
    get:
      tags:
        - proposals
      summary: Count instances of the model matched by where from the data source.
      operationId: proposals.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
definitions:
  proposals:
    properties:
      BusinessName:
        type: string
      BusinessType:
        type: string
      TotalCurrentFees:
        type: number
        format: double
      TotalNewFees:
        type: number
        format: double
      id:
        type: string
      prUsersId:
        type: string
    required:
      - BusinessName
      - BusinessType
      - TotalCurrentFees
      - TotalNewFees
    additionalProperties: false
  prUsers:
    properties:
      company_name:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      id:
        type: string
    required:
      - first_name
      - last_name
    additionalProperties: false
basePath: /api
swagger: '2.0'
info:
  x-ibm-name: proposals
  version: 1.0.0
  title: proposals
schemes:
  - https
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  oauth-service:
    type: oauth2
    description: ''
    flow: password
    scopes:
      pr-users: ''
    tokenUrl: >-
      https://p5072dp.apicww.cloud/latin-america/apic-demo/oauth-service/oauth2/token
  clientIdHeader:
    type: apiKey
    in: header
    name: X-IBM-Client-Id
  clientSecretHeader:
    in: header
    name: X-IBM-Client-Secret
    type: apiKey
security:
  - clientIdHeader: []
    clientSecretHeader: []
    oauth-service:
      - pr-users
x-ibm-configuration:
  testable: true
  enforced: true
  cors:
    enabled: true
  catalogs:
    apic-dev:
      properties:
        runtime-url: $(TARGET_URL)
    sb:
      properties:
        runtime-url: 'https://legacyproposalsapp.mybluemix.net'
  assembly:
    execute:
      - activity-log:
          title: log payload
          content: payload
          error-content: payload
          version: 1.0.0
      - gatewayscript:
          title: gatewayscript
          version: 1.0.0
          source: |-
            var requestData = apim.getvariable('message.body');

            requestData.company_name = "XPO Logistics"

            apim.setvariable('message.body', requestData);
      - invoke:
          title: invoke
          timeout: 60
          verb: keep
          cache-response: protocol
          cache-ttl: 900
          stop-on-error:
            - null
          version: 1.0.0
          target-url: $(runtime-url)$(request.path)$(request.search)
  gateway: datapower-gateway
  properties:
    runtime-url:
      value: 'https://legacyproposalsapp.mybluemix.net'
      description: ''
      encoded: false
    invoke-tls-profile:
      value: ''
      description: ''
      encoded: false
  phase: realized
